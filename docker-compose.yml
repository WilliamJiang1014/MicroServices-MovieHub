services:
  # Redis缓存服务
  redis:
    image: redis:7-alpine
    container_name: moviehub-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Gateway - 统一入口
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    container_name: moviehub-api-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - AGGREGATION_URL=http://aggregation:3004
      - LLM_URL=http://llm:3001
      - USER_URL=http://user:3005
      - TMDB_URL=http://tmdb:3002
      - OMDB_URL=http://omdb:3003
      - TVMAZE_URL=http://tvmaze:3006
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
      aggregation:
        condition: service_started
      llm:
        condition: service_started
      user:
        condition: service_started
      tmdb:
        condition: service_started
      omdb:
        condition: service_started
      tvmaze:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LLM服务 - AI功能
  llm:
    build:
      context: .
      dockerfile: services/llm-service/Dockerfile
    container_name: moviehub-llm
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - QWEN_API_KEY=${QWEN_API_KEY}
      - QWEN_API_URL=https://dashscope.aliyuncs.com/compatible-mode/v1
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TMDB数据源服务
  tmdb:
    build:
      context: .
      dockerfile: services/provider-tmdb/Dockerfile
    container_name: moviehub-tmdb
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - TMDB_API_KEY=${TMDB_API_KEY}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OMDb数据源服务
  omdb:
    build:
      context: .
      dockerfile: services/provider-omdb/Dockerfile
    container_name: moviehub-omdb
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - OMDB_API_KEY=${OMDB_API_KEY}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TVMaze数据源服务
  tvmaze:
    build:
      context: .
      dockerfile: services/provider-tvmaze/Dockerfile
    container_name: moviehub-tvmaze
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=production
      - PORT=3006
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 数据聚合服务
  aggregation:
    build:
      context: .
      dockerfile: services/aggregation-service/Dockerfile
    container_name: moviehub-aggregation
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - TMDB_PROVIDER_URL=http://tmdb:3002
      - OMDB_PROVIDER_URL=http://omdb:3003
      - TVMAZE_PROVIDER_URL=http://tvmaze:3006
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
      tmdb:
        condition: service_healthy
      omdb:
        condition: service_healthy
      tvmaze:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 用户服务
  user:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    container_name: moviehub-user
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Gateway - MCP服务注册中心
  mcp-gateway:
    build:
      context: .
      dockerfile: services/mcp-gateway/Dockerfile
    container_name: moviehub-mcp-gateway
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=production
      - PORT=3007
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # TMDB MCP Provider
  mcp-tmdb:
    build:
      context: .
      dockerfile: services/mcp-provider-tmdb/Dockerfile
    container_name: moviehub-mcp-tmdb
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=production
      - PORT=3008
      - TMDB_API_KEY=${TMDB_API_KEY}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3008/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # OMDb MCP Provider
  mcp-omdb:
    build:
      context: .
      dockerfile: services/mcp-provider-omdb/Dockerfile
    container_name: moviehub-mcp-omdb
    ports:
      - "3009:3009"
    environment:
      - NODE_ENV=production
      - PORT=3009
      - OMDB_API_KEY=${OMDB_API_KEY}
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3009/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP服务自动注册初始化容器
  mcp-registrar:
    image: curlimages/curl:latest
    container_name: moviehub-mcp-registrar
    depends_on:
      mcp-gateway:
        condition: service_healthy
      mcp-tmdb:
        condition: service_healthy
      mcp-omdb:
        condition: service_healthy
    command: >
      sh -c "
        echo '🔧 等待MCP服务启动...' &&
        sleep 10 &&
        echo '📝 注册TMDB Provider...' &&
        curl -X POST 'http://mcp-gateway:3007/register' -H 'Content-Type: application/json' -d '{\"name\": \"tmdb-provider\", \"endpoint\": \"http://mcp-tmdb:3008\", \"description\": \"TMDB Movie Provider\", \"version\": \"1.0.0\"}' &&
        echo '📝 注册OMDb Provider...' &&
        curl -X POST 'http://mcp-gateway:3007/register' -H 'Content-Type: application/json' -d '{\"name\": \"omdb-provider\", \"endpoint\": \"http://mcp-omdb:3009\", \"description\": \"OMDb Movie Provider\", \"version\": \"1.0.0\"}' &&
        echo '✅ MCP服务注册完成！'
      "
    restart: "no"

  # Graph Orchestrator - LangGraph工作流编排
  graph-orchestrator:
    build:
      context: .
      dockerfile: services/graph-orchestrator/Dockerfile
    container_name: moviehub-graph-orchestrator
    ports:
      - "3010:3010"
    environment:
      - NODE_ENV=production
      - PORT=3010
      - MCP_GATEWAY_URL=http://mcp-gateway:3007
      - REDIS_URL=redis://redis:6379
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
      mcp-registrar:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3010/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web前端应用
  web-client:
    build:
      context: .
      dockerfile: apps/web-client/Dockerfile
    container_name: moviehub-web-client
    ports:
      - "80:80"
    environment:
      - VITE_API_URL=http://localhost:3000
    depends_on:
      api-gateway:
        condition: service_healthy
      graph-orchestrator:
        condition: service_healthy
      mcp-gateway:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: moviehub-network

